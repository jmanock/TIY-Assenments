/**
 * Each new term in the Fibonacci sequence is generated by
 * adding the previous two terms. By starting with 1 and 2
 * the first 10 terms will be
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89...
 * By considering the terms in the Fibonacci sequence whose
 * values do not exceed four million, sind the sum of the even terms
 */

 function solution(){
   var fiboSeq = [],
   evens = [],
   sum = 0;
   return {
     solveFor: function(limit){
       return this.sumEvens(this.filterEvens(this.fibo(limit)));
     },

     // Creates the Fibonacci Sequence
     fibo: function(limit){
       var prev = 1, curr = 2;
       for(curr = curr; curr < limit; curr = prev + curr){
         prev = curr - prev;
         fiboSeq.push(curr);
       }
       return fiboSeq;
     },

     // Filters the even numbers out of the Fibonacci Sequence
     // generated by object Fibo
     filterEvens: function(fiboSeq){
       fiboSeq.forEach(function(value, index){
         if(value % 2 === 0){
           evens.push(value);
         }
       });
       // Returns a list of the even numbers pulled from Fibo
       return evens;
     },
     sumEvens: function(evens){
       evens.forEach(function(value,index){
         sum += value;
       });
       // Return the sum
       return sum;
     }

   };

 }

var assert = require('assert');

 var S;
 beforeEach(function(){
   S = solution();
 });

 describe('solveFor', function(){
   it('should be able to solve euler2', function(){
     assert.equal(S.solveFor(100,1,2),44);
   });

   it('should be able to solve euler #2', function(){
     assert.equal(S.solveFor(4000000, 1, 2), 4613732);
   });
 });
